snippet knkt
	%>%
	knitr::kable()
	
snippet docoptr
	'usage: 
	  ${1:script.R} cmd [-f --arg=<msg>]
	  ${1:script.R} -h | --help
	
	options: 
	 -f           Flag
	 --arg=<msg>  Argument with value
	 -h --help    Show this screen' -> doc
	
	library(docopt)
	opts <- docopt(doc)
	
snippet aa
	${1:var} <- ${1:var} %>%
	  ${2:code}

snippet qq
	${1:var} %>%
	  ${2:code}
	  
snippet aq
	${1:newvar} <- ${2:df} %>%
	  ${3:code}

snippet prettydate
	strftime(Sys.time(), "%A, %b %d, %Y")

snippet tts
        strftime(Sys.time(), "${1:%F %T}")

snippet hdr
	# ---- ${1:header} ----

snippet a=
	${1:opt} = ${1:opt}

snippet zz
	${1:var} <- ${1:var} %||% ${2:val}

snippet here
	here::here("${1:path}")

# ------------------------------------------------------------
# ggplot2
# ------------------------------------------------------------

snippet gg "ggplot generic"
	ggplot(${1:data}, aes(${2:aes})) + ${0}

snippet gl "ggplot line"
	ggplot(${1:data}, aes(${2:x}, ${3:y})) + geom_line()${0}

snippet gp "ggplot point"
	ggplot(${1:data}, aes(${2:x}, ${3:y})) + geom_point()${0}

snippet gs "ggsave()"
	ggsave("${1:filename}.pdf", width = ${2:6}, height = ${3:6})${0}

snippet ge "geom_*"
	geom_${1:point}(${0})


# ------------------------------------------------------------
# dplyr, purrr
# ------------------------------------------------------------
snippet br "bind_rows()"
	bind_rows(${0})

snippet bc "bind_cols()"
	bind_cols(${0})

snippet jo "*_join"
	${1:inner}_join(${0})

snippet pmd "purrr::map_dfr()"
	purrr::map_dfr(${0})

snippet pmdc "purrr::map_dfc()"
	purrr::map_dfc(${0})

snippet pm "purrr::map()"
	purrr::map(${0})

snippet pmc "purrr::map_chr()"
	purrr::map_chr(${0})

snippet pmi "purrr::map_int()"
	purrr::map_int(${0})

snippet pmb "purrr::map_lgl()"
	purrr::map_lgl(${0})

snippet pmdd "purrr::map_dbl()"
	purrr::map_dbl(${0})

# ------------------------------------------------------------
# rlang
# ------------------------------------------------------------
snippet rlquo
        ${1:var} <- rlang::enquo(${1:var})
        ${1:var}_name <- rlang::quo_name(${1:var})

# ------------------------------------------------------------
# shiny
# ------------------------------------------------------------
snippet shinyapp
        library(shiny)

        ui <- fluidPage(
          ${0}
        )

        server <- function(input, output, session) {

        }

        shinyApp(ui, server)

snippet shinymod
        ${1:name}UI <- function(id) {
          ns <- NS(id)
          tagList(
                ${0}
          )
        }

        ${1:name} <- function(input, output, session, ...) {
	  ns <- session$ns
        }


# ------------------------------------------------------------
# testthat
# ------------------------------------------------------------
snippet ttht "Create test"
	test_that("${1:description}", {
	  $0
	})
endsnippet

snippet ttef "Expect false"
	expect_false(${1:${VISUAL}})
endsnippet

snippet ttet "Expect true"
	expect_true(${1:${VISUAL}})
endsnippet

snippet ttee "Expect equal"
	expect_equal(${1:${VISUAL}}, $2)
endsnippet
